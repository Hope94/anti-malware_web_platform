from main.extractor.apis_manager import is_suspicious_methode, is_restricted_, get_required_permissions_by_api_level
from main.extractor.utils import execute_baksmali_jar, get_smali_files, get_smali_lines, clean_baksmali_output_dir
import re
from collections import Counter

# Feature types
RESTRICTED_API = 'restricted_api'
USED_PERM = 'used_perm'
SUSPICIOUS_API = 'suspicious_api'
URL = 'url'


METHOD_DESCRIPTION_GROUP = 'method_description'
URL_GROUP = 'url'

java_identifier_pattern = r'[_$a-zA-Z0-9][_$a-zA-Z0-9]*'
smali_object_type_pattern = 'L(?:' + java_identifier_pattern + '/)+' + java_identifier_pattern + ';'
smali_primit_type_pattern = r'[IZBSCJFD]'
smali_array_pattern = '\[+(?:' + smali_object_type_pattern + '|' + smali_primit_type_pattern + ')'
smali_args_pattern = smali_object_type_pattern + '|' + smali_primit_type_pattern + '|' + smali_array_pattern
smali_return_value_pattern = smali_args_pattern + '|V'
methode_name_pattern = '(?:'+java_identifier_pattern+'|<init>)'


method_call_pattern = r'(?P<method_description>' + smali_object_type_pattern + '->' + methode_name_pattern + ')\((?:' + smali_args_pattern + ')*\)(?:' + smali_return_value_pattern + ')'
method_call_regex = re.compile(method_call_pattern)

url_pattern = r'const-string v\d+, "(?P<url>(((https?|ftp)://)|(www\.))(\w+\.)+\w+((/\w+)*(/.*)?)?(:\d+)?)"'
url_regex = re.compile(url_pattern)

class FeatureExtractorDex():
    def __init__(self):
        self._restricted = list()
        self._restricted_by_pscout = list()
        self._restricted_by_axplorer = list()
        self._restricted_by_ps_ax = list()

        self._suspicious_api = list()
        self._urls = list()

        self._used_permission_by_pscout = list()
        self._used_permission_by_axplorer = list()

        self._global = list()


    def extract_all_dex_features(self,apk_path: str, in_memory=True):
        smali_access_pattern = r'.*access\$.*'
        pre_line = str()
        clean_baksmali_output_dir()
        execute_baksmali_jar(apk_path)
        for smali_file in get_smali_files():
            for smali_line in get_smali_lines(smali_file):
                _line = smali_line.strip()
                smali_invoke_pattern_start = r'^invoke-*'
                if re.search(smali_invoke_pattern_start, _line):
                    if re.search(smali_access_pattern, _line):
                        api = self.extract_api_call(pre_line)
                    else:
                        api = self.extract_api_call(_line)
                    if api and is_restricted_(api):

                        p, a = get_required_permissions_by_api_level(api_level, api, in_memory)
                        _a = len(a)
                        _p = len(p)
                        if _a != 0 and _p != 0:
                            self._restricted_by_ps_ax.append(api)
                            self._used_permission_by_pscout.extend(p)
                            self._used_permission_by_axplorer.extend(a)
                        if _p != 0 and _a == 0:
                            self._restricted_by_pscout.append(api)
                            self._used_permission_by_pscout.extend(p)
                        if _a != 0 and not _p == 0:
                            self._restricted_by_axplorer.append(api)
                            self._used_permission_by_axplorer.extend(a)
                        if _a == 0 and _p == 0:
                            self._restricted.append(api)

                    if api and is_suspicious_methode(self.extract_methode_path(api), in_memory=in_memory):
                        self._suspicious_api.append(api)
                else:
                    url = self.extract_url(smali_line)
                    if url:
                        self._urls.append(url)
                pre_line = smali_line
        result = dict()
        if self._restricted_by_pscout:
            result.update({'r_api_ps': dict(Counter(self._restricted_by_pscout))})
        if self._used_permission_by_pscout:
            result.update({'used_permission_ps': dict(Counter(self._used_permission_by_pscout))})
        if self._restricted_by_axplorer:
            result.update({'r_api_ax': dict(Counter(self._restricted_by_axplorer))})
        if self._used_permission_by_axplorer:
            result.update({'used_permission_ax': dict(Counter(self._used_permission_by_axplorer))})
        if self._restricted_by_ps_ax:
            result.update({'r_api_ps_ax': dict(Counter(self._restricted_by_ps_ax))})
        if self._global:
            result.update({'used_api': dict(Counter(self._global))})
        if self._urls:
            result.update({'url': dict(Counter(self._urls))})
        return result

    @staticmethod
    def extract_api_call(line: str) -> str:
        api_call = method_call_regex.search(line)
        if api_call:
            return api_call.group()
        return None

    @staticmethod
    def extract_methode_path(line: str) -> str:
        api_call = method_call_regex.search(line)
        if api_call:
            return api_call.group(METHOD_DESCRIPTION_GROUP)

    @staticmethod
    def extract_url(line: str) -> str:
        url = url_regex.search(line)
        if url:
            return url.group(URL_GROUP)
        return None
# from pfe_plateforme_web.settings import APK_DIR
# from main.extractor.apis_manager import init_in_memory_dicts
# path_to_apk = os.path.join(APK_DIR,'google.apk')
# init_in_memory_dicts ()
#
# print(extract_dex_features(path_to_apk, in_memory=True))

