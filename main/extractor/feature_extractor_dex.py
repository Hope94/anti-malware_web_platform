from main.extractor.dex_extractor import extract_url, extract_api_call, extract_methode_path
from main.extractor.apis_manager import is_suspicious_methode,is_restricted_, get_required_permissions_by_api_level
from main.extractor.utils import execute_baksmali_jar, get_smali_files, get_smali_lines, clean_baksmali_output_dir
import os
import re
from collections import Counter


def extract_dex_features_api_level(apk_path: str,api_level:int, in_memory=False):
    _suspicious_api = list()
    _urls = list()

    _restricted_by_pscout = list()
    _used_permission_by_pscout = list()
    _restricted_by_axplorer = list()
    _used_permission_by_axplorer = list()
    _restricted_by_ps_ax = list()
    _global = list()

    smali_access_pattern = r'.*access\$.*'
    reflection_pattern_start = r'^Ljava/lang/reflect/.*'
    pre_line = str()
    clean_baksmali_output_dir()
    execute_baksmali_jar(apk_path)

    for smali_file in get_smali_files():
        for smali_line in get_smali_lines(smali_file):
            _line = smali_line.strip()
            smali_invoke_pattern_start = r'^invoke-*'
            if re.search(smali_invoke_pattern_start, _line):
                if re.search(smali_access_pattern, _line):
                    api = extract_api_call(pre_line)
                else:
                    api = extract_api_call(_line)
                if api and is_restricted_(api):

                    p, a = get_required_permissions_by_api_level(api_level, api, in_memory)
                    _a = len(a)
                    _p = len(p)
                    if _a != 0 and _p != 0:
                        _restricted_by_ps_ax.append(api)
                        _used_permission_by_pscout.extend(p)
                        _used_permission_by_axplorer.extend(a)
                    if _p != 0 and _a == 0:
                        _restricted_by_pscout.append(api)
                        _used_permission_by_pscout.extend(p)
                    if _a != 0 and _p == 0:
                        _restricted_by_axplorer.append(api)
                        _used_permission_by_axplorer.extend(a)
                    if _a == 0 and _p == 0:
                        _global.append(api)
                if api and is_suspicious_methode(extract_methode_path(api), in_memory=in_memory):
                    _suspicious_api.append(api)
                if api and re.search(reflection_pattern_start, api):
                    _suspicious_api.append(api)
            else:
                url = extract_url(smali_line)
                if url:
                    _urls.append(url)
            pre_line = smali_line
    result = dict()
    if _restricted_by_pscout:
        result.update({'r_api_ps': dict(Counter(_restricted_by_pscout))})
    if _used_permission_by_pscout:
        result.update({'used_permission_ps': dict(Counter(_used_permission_by_pscout))})
    if _restricted_by_axplorer:
        result.update({'r_api_ax': dict(Counter(_restricted_by_axplorer))})
    if _used_permission_by_axplorer:
        result.update({'used_permission_ax': dict(Counter(_used_permission_by_axplorer))})
    if _restricted_by_ps_ax:
        result.update({'r_api_ps_ax': dict(Counter(_restricted_by_ps_ax))})
    if _global:
        result.update({'used_api': dict(Counter(_global))})
    if _urls:
        result.update({'url': dict(Counter(_urls))})
    if _suspicious_api:
        result.update({'suspicious_api': dict(Counter(_suspicious_api))})
    return result


def extract_suspicious_api(apk_path: str):
    _suspicious_api = list()

    smali_access_pattern = r'.*access\$.*'
    reflection_pattern_start = r'^Ljava/lang/reflect/.*'
    pre_line = str()
    clean_baksmali_output_dir()
    execute_baksmali_jar(apk_path)

    for smali_file in get_smali_files():
        for smali_line in get_smali_lines(smali_file):
            _line = smali_line.strip()
            smali_invoke_pattern_start = r'^invoke-*'
            if re.search(smali_invoke_pattern_start, _line):
                if re.search(smali_access_pattern, _line):
                    api = extract_api_call(pre_line)
                else:
                    api = extract_api_call(_line)
                if api and is_suspicious_methode(extract_methode_path(api), in_memory=True):
                    _suspicious_api.append(api)
                if api and re.search(reflection_pattern_start, api):
                    _suspicious_api.append(api)

    result = dict()
    if  _suspicious_api:
        result.update({'suspicious_api': dict(Counter(_suspicious_api))})

    return result


