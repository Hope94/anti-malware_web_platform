import os
import shutil
import subprocess
import pprint
import platform
import numpy as np
from pfe_plateforme_web.settings import BASE_DIR

MAGIC_PREFIX = ""
if platform.system() == "Windows":
    MAGIC_PREFIX = ""
    # MAGIC_PREFIX = "\\\\?\\"

MAIN_DIR = os.path.join(BASE_DIR,'main')
EXTRACTOR_DIR = os.path.join(MAIN_DIR,'extractor')
TOOLS_DIR = os.path.join(EXTRACTOR_DIR,'tools')
OUTPUT_DIR = os.path.join(EXTRACTOR_DIR,'tools_output')

BAKSMALI_PATH = os.path.join(TOOLS_DIR, 'baksmali-2.1.3.jar')
BAKSMALI_OUTPUT = MAGIC_PREFIX + os.path.join(OUTPUT_DIR, 'baksmali_output')

APKTOOL_PATH = os.path.join(TOOLS_DIR, 'apktool.jar')
APKTOOL_OUTPUT = MAGIC_PREFIX + os.path.join(OUTPUT_DIR, 'apktool_output')
APKTOOL_OUTPUT_MANIFEST = os.path.join(APKTOOL_OUTPUT, "AndroidManifest.xml")

AAPT_PATH = os.path.join(TOOLS_DIR, 'aapt.exe')
AAPT_OUTPUT = MAGIC_PREFIX + os.path.join(OUTPUT_DIR, 'aapt_output')
AAPT_OUTPUT_MANIFEST = os.path.join(AAPT_OUTPUT, "AndroidManifest.xml")

APKS_JS_OUTPUT_PATH = os.path.join(EXTRACTOR_DIR, 'apks_json_output')
RANDOM_STATE = 42


def clean_directory(dir_path):
    _, dirnames, filenames = next(os.walk(dir_path), (None, None, None))
    if dirnames:
        for dirname in dirnames:
            shutil.rmtree(os.path.abspath(os.path.join(dir_path, dirname)))
    if filenames:
        for filename in filenames:
            os.remove(os.path.abspath(os.path.join(dir_path, filename)))


def clean_baksmali_output_dir():
    clean_directory(BAKSMALI_OUTPUT)


def clean_apktool_output():
    clean_directory(APKTOOL_OUTPUT)


def clean_aapt_output():
    clean_directory(AAPT_OUTPUT)


def execute_baksmali_jar(apk_path: str):
    subprocess.run(['java', '-jar', BAKSMALI_PATH, apk_path, '-o', BAKSMALI_OUTPUT], shell=True)


def execute_apktool(apk_path: str):
    subprocess.run(['java', '-jar', APKTOOL_PATH, "-o", APKTOOL_OUTPUT, "-s", "-f", "d", apk_path],
                   stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)


def execute_aapt(apk_path: str):
    f = open(AAPT_OUTPUT_MANIFEST, "w")
    subprocess.run([AAPT_PATH, 'dump', "xmltree", apk_path, "AndroidManifest.xml"], stdout=f, shell=True)
    f.close()


def set_aapt_path(aapt_path: str):
    global AAPT_PATH
    AAPT_PATH = aapt_path


def list_files(path: str) -> set:
    files = set()
    for (dirpath, _, filenames) in os.walk(path):
        for filename in filenames:
            files.add(os.path.abspath(os.path.join(dirpath, filename)))
    return files


def get_smali_files() -> str:
    for (dirpath, _, filenames) in os.walk(BAKSMALI_OUTPUT):
        if filenames:
            for file_name in filenames:
                yield os.path.join(dirpath, file_name)


def get_smali_lines(file_path: str) -> str:
    with open(file_path, encoding='utf8') as file:
        for line in file:
            yield line


def find_closest_values(array, values):
    closes_values = set()
    for value in values:
        idx = np.abs(array - value).argmin()
        closes_values.add(array[idx])
    return closes_values

