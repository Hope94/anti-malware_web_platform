from main.androguard.androguard.util import get_certificate_name_string
from pfe_plateforme_web.settings import APK_DIR
import hashlib
import os
from androguard.core.bytecodes.apk import APK
#from main.extractor.feature_extractor_manifest import FeatureExtractorManifest
#from main.extractor.feature_extractor_dex import FeatureExtractorDex
#from db_manager import insert_apk, insert_feature, add_apk_to_dataset,insert_apk_features
#from django.db import transaction


class ApkAnalysis(object):
    def __init__(self, app_path):
        self.app_path = app_path
        self.app = APK (app_path)
        self.d = None
        self.dx = None
        self.cert = None

        if (self.app.is_signed ()):
                signatures = self.app.get_signature_names ()
                for signature in signatures:
                    self.cert = self.app.get_certificate (signature)





    def get_detailed_analysis(self,app_path):
        from androguard.misc import AnalyzeAPK
        self.a,self.d, self.dx = AnalyzeAPK(app_path)

    def get_developer_name(self):
        if self.cert is not None:
            return self.cert['tbs_certificate']['issuer'].native.get('organization_name','Unknown')
        else:
            return "Unknown"

    def not_valid_before(self):
        if self.cert is not None:
            return self.cert['tbs_certificate']['validity']['not_before'].native
        else:
            return "Unknown"


    def not_valid_after(self):
        if self.cert is not None:
            return self.cert['tbs_certificate']['validity']['not_after'].native
        else:
            return "Unknown"


    def get_app_name(self):
        return self.app.get_app_name()
    def get_package(self):
        return  self.app.get_package()
    def get_androidversion_name(self):
        return self.app.get_androidversion_name()

    def get_hashes(self,block_size=2 ** 8):
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        sha256 = hashlib.sha256()
        f = open(self.app_path, 'rb')
        while True:
            data = f.read(block_size)
            if not data:
                break

            md5.update(data)
            sha1.update(data)
            sha256.update(data)
        return [md5.hexdigest(), sha1.hexdigest(), sha256.hexdigest()]
    '''
     def extract_info_apk(self):
        hashes = self.get_hashes()
        info_dict = {
        'name':  self.get_app_name(),
        'package': self.get_package(),
        'developer' : self.get_developer_name(),
        'displayed_version': self.get_androidversion_name(),
        'size' : os.path.getsize (self.app_path),
        'md5' : hashes[0],
        'sha1' : hashes[1],
        'sha256': hashes[2]
        }
        return info_dict

    # by using bulk_create function
    @transaction.atomic
    def extract_apk(self, dataset: str, in_memory=True, manifest_tool=2, malignity=-1):
        """
        Extracting apk Dex and Manifest features
        :param path: path to apk
        :param dataset:
        :param in_memory:
        :param manifest_tool:  0: aapt, 1: ApkTool, 0:Androguard
        :param malignity: 0: Begnin , 1: Maligne, -1: Not Specific
        :return: Object Apk Models
        """
        manifest_features = FeatureExtractorManifest(self.app)
        dex_features = FeatureExtractorDex()
        apk = insert_apk(info= self.extract_info_apk(), malignity=malignity)
        add_apk_to_dataset(apk, dataset)
        manifest_features = manifest_features.extract_manifest_features(self.app_path, tool=manifest_tool)
        dex_features = dex_features.extract_all_dex_features(self.app_path, in_memory=in_memory)
        list_features = []
        for type in manifest_features:
            for name in manifest_features[type]:
                f = insert_feature(name=name, type=type)
                list_features.append((f, manifest_features[type][name]))
        for type in dex_features:
            for name in dex_features[type]:
                f = insert_feature(name=name, type=type)
                list_features.append((f, dex_features[type][name]))
        insert_apk_features(apk, list_features)
        return apk
    '''


from androguard.core.analysis import analysis
from pfe_plateforme_web.settings import APK_DIR
path_to_apk = os.path.join(APK_DIR,'Mobile-antiMalware.apk')
andro = ApkAnalysis (app_path=path_to_apk)
print(andro.get_developer_name())
print(andro.not_valid_after())
print(andro.not_valid_before())





