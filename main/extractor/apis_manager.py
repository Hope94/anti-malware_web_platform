from db_manager import  is_suspicious,  get_suspicious_api


SUSPICIOUS_APIS = None
PERMISSION_MAPPING_API = None # with api level and method : pscout or axplorer
ALL_API =None

import csv
import os
from pfe_plateforme_web.settings import MEDIA_DIR
import json

VERSION = '5.1.1'
API_PERMISSION_MAPPING_CSV_NAME='api_permission_mapping.csv'
API_CSV_PATH = os.path.join(MEDIA_DIR,'api_csv_files')
SUSPICIOUS_APIS_CSV_NAME=os.path.join(API_CSV_PATH,'suspicious_apis.csv')
API_PERMISSION_MAPPING_JSON = os.path.join(MEDIA_DIR,'api_permission_mapping')



def is_restricted_(api: str, in_memory=True) -> bool:
    if in_memory:
        if api in ALL_API['api']:
            return True
    return False






def get_required_permissions_by_api_level(api_level: int ,api: str, in_memory=True):
    perm_p = []
    perm_a =[]
    if in_memory:
        if api in PERMISSION_MAPPING_API[str(api_level) + '_pscout']:
            perm_p=PERMISSION_MAPPING_API[str(api_level)+'_pscout'][api]
        if api in PERMISSION_MAPPING_API[str(api_level) + '_axplorer']:
            perm_a = PERMISSION_MAPPING_API[str(api_level) + '_axplorer'][api]
    return perm_p, perm_a

def is_suspicious_methode(methode_description: str, in_memory=False) -> bool:
    if in_memory:
        return SUSPICIOUS_APIS[methode_description]
    return is_suspicious(methode_description)





def init_in_memory_suspicious():
    global SUSPICIOUS_APIS
    SUSPICIOUS_APIS = get_suspicious_api()


def load_api_permission_mapping(apilevel,method):
    permissions_file = os.path.join(API_PERMISSION_MAPPING_JSON, method+"_permissions_{}.json".format(apilevel))
    print(permissions_file)
    if not os.path.isfile(permissions_file):
        print("file not found")
        return {}

    with open(permissions_file, "r") as fp:
        return json.load(fp)
def init_in_memory_all_permission_mappings(create_all_api=True):
    """
    Load the API/Permission mapping
    """
    global PERMISSION_MAPPING_API
    global ALL_API

    all_api = set()
    all_api_permission_mapping = dict()
    for name in ['axplorer','pscout']:
        for level in range(16,26):
            api_map = load_api_permission_mapping(level,name)
            all_api_permission_mapping.update({str(level) + '_' + name: api_map})
            if create_all_api:
                all_api.update(api_map.keys())
    if create_all_api:
        print(len(all_api))
        filePathNameWExt = os.path.join(API_PERMISSION_MAPPING_JSON, "all_api.json")
        ALL_API = {'api': list(all_api)}
        with open(filePathNameWExt, 'w') as fp:
            json.dump(ALL_API, fp)
        fp.close()

    else:
        api_file = os.path.join(API_PERMISSION_MAPPING_JSON,"all_api.json")
        if not os.path.isfile(api_file):
            return {}
        with open(api_file, "r") as fp:
            all_api= json.load(fp)
            ALL_API = all_api
    PERMISSION_MAPPING_API = all_api_permission_mapping

# init_in_memory_all_permission_mappings(create_all_api=False)
# a,b = get_required_permissions_by_api_level(api_level=16 ,api='Landroid/app/Activity;-><init>()V', in_memory=True)
# print(a,b)