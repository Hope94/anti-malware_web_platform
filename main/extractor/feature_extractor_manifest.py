import re, os
from main.extractor.utils import *
from collections import Counter
from main.extractor.apk_information_extractor import AndroguardAnalysis
import xml.etree.ElementTree as etree
from androguard.core.bytecodes.apk import APK

#Const
#android_name_attrib = '{http://schemas.android.com/apk/res/android}name'

PERMISSION = 'permission'
FEATURE = 'feature'
INTENT = 'intent'
ACTIVITY = 'activity'
SERVICE = 'service'
RECEIVER = 'receiver'
PROVIDER = 'provider'

categories = [ACTIVITY,SERVICE,RECEIVER,PROVIDER]
PATTERN = 'E: uses-permission(.*?)A: android:name(.*?)="(?P<'+PERMISSION+'>.*?)"|' \
          'E: uses-feature(.*?)A: android:name(.*?)="(?P<'+FEATURE+'>.*?)"|' \
          'E: intent-filter(.*?)E: action(.*?)A: android:name(.*?)="(?P<'+INTENT+'>.*?)"|' \
          'E: activity(.*?)A: android:name(.*?)="(?P<'+ACTIVITY+'>.*?)"|' \
          'E: service(.*?)A: android:name(.*?)="(?P<'+SERVICE+'>.*?)"|' \
          'E: provider(.*?)A: android:name(.*?)="(?P<'+PROVIDER+'>.*?)"|' \
          'E: receiver(.*?)A: android:name(.*?)="(?P<'+RECEIVER+'>.*?)"'

PATTERN_XML =   '<uses-permission android:name="(?P<'+PERMISSION+'>.*?)"|'\
                '<uses-feature android:name="(?P<'+FEATURE+'>.*?)"|'\
                '<intent-filter(.*?)action android:name="(?P<'+INTENT+'>.*?)"|'\
                '<activity(.*?)android:name="(?P<'+ACTIVITY+'>.*?)"|'\
                '<service(.*?)android:name="(?P<'+SERVICE+'>.*?)"|'\
                '<provider(.*?)android:name="(?P<'+PROVIDER+'>.*?)"|'\
                '<receiver(.*?)android:name="(?P<'+RECEIVER+'>.*?)"|'


_permissions = list()
_hardwares = list()
_filters = list()
_activities = list()
_receivers = list()
_services = list()
_providers = list()


def extract_features_using_tool(apk_path, execute_tool, manifest_path: str, pattern: str)->dict:
    execute_tool(apk_path)
    for _list in [_activities, _permissions, _hardwares, _filters,
                 _receivers, _services, _providers]:
        _list.clear()
    # opening manifest and searching for regex
    with open(manifest_path, 'r', encoding='utf-8') as manifest_file:
        manifest_content = manifest_file.read()
        for match in re.finditer(pattern, manifest_content, re.DOTALL):
            get_feature(match,count=True)
    return {
    'defined_perm':dict(Counter(_permissions)),
    'intent': dict(Counter(_filters)),
    'activity' : dict(Counter(_activities)),
    'service': dict(Counter(_services)),
    'receiver':dict(Counter(_receivers)),
    'provider': dict(Counter(_providers)),
    'hardware': dict(Counter(_hardwares))
    }

def extract_intent(androguard,categorie,names):
    return [i for l in list(map (lambda n: androguard.get_intent_filters(categorie, n),names))
            if 'action' in l.keys()
            for i in l['action']]


def extract_features_using_androguard(androguard: APK):
    resulat_dict=dict()
    count_dict=dict()
    _permissions = androguard.get_permissions()

    _hardwares = list(androguard.get_features())
    np=len(_permissions)
    if np>0:
        resulat_dict = {'defined_perm': dict(Counter(_permissions)),
                       }
        count_dict = {'num_permission': np}
    nh = len(_hardwares)
    if nh>0:
        resulat_dict.update({'hardware': dict(Counter(_hardwares))})
        count_dict.update({'num_hardware': len(_hardwares)})
    # List of all intents in apk
    _filters= list()
    # Apk components
    components_dict = {'activity': androguard.get_activities(),
                       'service': androguard.get_services(),
                       'receiver': androguard.get_receivers(),
                       'provider': androguard.get_providers()}

    # Extract intents
    for categorie, names in components_dict.items():
        # Components and Count the number of each components in apk
        nm = len(names)
        if nm>0:
            count_dict.update({'num_' + categorie: nm})
            resulat_dict.update({categorie: dict(Counter(components_dict[categorie]))})
            # Extract intent filter for each component
            intents = extract_intent(androguard,categorie, names)
            ni = len(intents)
            if ni>0:
                _filters.extend(intents)
                count_dict.update({'num_intent_' + categorie: ni})
    nf= len(_filters)
    if nf>0:
        resulat_dict.update({'intent': dict(Counter(_filters))})
        count_dict.update({'num_intent': nf})
    resulat_dict.update({'component_count': count_dict})
    return resulat_dict


def extract_manifest_features(apk_path, use_aapt=False)->dict:
    if use_aapt:
        #call aapt
        return extract_features_using_tool(apk_path,execute_aapt,AAPT_OUTPUT_MANIFEST,PATTERN)
    else:
        #call apktool
        return extract_features_using_tool(apk_path, execute_apktool, APKTOOL_OUTPUT_MANIFEST, PATTERN_XML)

#used after calling aapt to distinguish the type of pattern found in regex
def get_feature(match,count=False):
    if match.group(PERMISSION):
        _permissions.append(match.group(PERMISSION))
    elif match.group(FEATURE):
         _hardwares.append(match.group(FEATURE))
    elif match.group(INTENT):
         _filters.append(match.group(INTENT))
    elif match.group(ACTIVITY):
        _activities.append(match.group(ACTIVITY))
    elif match.group(SERVICE):
        _services.append(match.group(SERVICE))
    elif match.group(PROVIDER):
        _providers.append(match.group(PROVIDER))
    elif match.group(RECEIVER):
        _receivers.append(match.group(RECEIVER))


# from pfe_plateforme_web.settings import APK_DIR
# from main.extractor.apis_manager import init_in_memory_dicts
#
# path_to_apk = os.path.join(APK_DIR,'skygofree.apk')
# androguard = AndroguardAnalysis (app_path=path_to_apk)
# print(extract_manifest_features(path_to_apk,True))
# androguard.a.get_features()
# # print(androguard.a.show())
# # print(androguard.a.get_intent_filters('activity','com.sysmanager.Main')['action'])
# one , two = extract_features_using_androguard(path_to_apk)
# print(one,two)