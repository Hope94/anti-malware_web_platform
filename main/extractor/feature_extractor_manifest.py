import re, os
from main.extractor.utils import *
from collections import Counter
from androguard.core.bytecodes.apk import APK

PERMISSION = 'permission'
FEATURE = 'feature'
INTENT = 'intent'
ACTIVITY = 'activity'
SERVICE = 'service'
RECEIVER = 'receiver'
PROVIDER = 'provider'


PATTERN = 'E: uses-permission(.*?)A: android:name(.*?)="(?P<'+PERMISSION+'>.*?)"|' \
          'E: uses-feature(.*?)A: android:name(.*?)="(?P<'+FEATURE+'>.*?)"|' \
          'E: intent-filter(.*?)E: action(.*?)A: android:name(.*?)="(?P<'+INTENT+'>.*?)"|' \
          'E: activity(.*?)A: android:name(.*?)="(?P<'+ACTIVITY+'>.*?)"|' \
          'E: service(.*?)A: android:name(.*?)="(?P<'+SERVICE+'>.*?)"|' \
          'E: provider(.*?)A: android:name(.*?)="(?P<'+PROVIDER+'>.*?)"|' \
          'E: receiver(.*?)A: android:name(.*?)="(?P<'+RECEIVER+'>.*?)"'

PATTERN_XML =   '<uses-permission android:name="(?P<'+PERMISSION+'>.*?)"|'\
                '<uses-feature android:name="(?P<'+FEATURE+'>.*?)"|'\
                '<intent-filter(.*?)action android:name="(?P<'+INTENT+'>.*?)"|'\
                '<activity(.*?)android:name="(?P<'+ACTIVITY+'>.*?)"|'\
                '<service(.*?)android:name="(?P<'+SERVICE+'>.*?)"|'\
                '<provider(.*?)android:name="(?P<'+PROVIDER+'>.*?)"|'\
                '<receiver(.*?)android:name="(?P<'+RECEIVER+'>.*?)"|'

class FeatureExtractorManifest():
    def __init__(self,androguard : APK):
        self.androguard = androguard
        self._permissions = list()
        self._hardwares = list()
        self._filters = list()
        self._activities = list()
        self._receivers= list()
        self._services = list()
        self._providers = list()

    def extract_features_using_tool(self,apk_path, execute_tool, manifest_path: str, pattern: str)->dict:
        execute_tool(apk_path)
        for _list in [self._activities, self._permissions, self._hardwares, self._filters,
                      self._receivers, self._services, self._providers]:
            _list.clear()
        # opening manifest and searching for regex
        with open(manifest_path, 'r', encoding='utf-8') as manifest_file:
            manifest_content = manifest_file.read()
            for matchs in re.finditer(pattern, manifest_content, re.DOTALL):
                self.get_feature(matchs)
        return {
        'defined_perm':dict(Counter(self._permissions)),
        'intent': dict(Counter(self._filters)),
        'activity' : dict(Counter(self._activities)),
        'service': dict(Counter(self._services)),
        'receiver':dict(Counter(self._receivers)),
        'provider': dict(Counter(self._providers)),
        'hardware': dict(Counter(self._hardwares))
        }

    def extract_intent(self,categorie,names):
        return [i for l in list(map (lambda n: self.androguard.get_intent_filters(categorie, n),names))
                if 'action' in l.keys()
                for i in l['action']]


    def extract_features_using_androguard(self):
        self._permissions = self.androguard.get_permissions()
        self._hardwares = list(self.androguard.get_features())

        resulat_dict = {'defined_perm': dict(Counter(self._permissions)),
                        'hardware': dict(Counter(self._hardwares))}
        count_dict = {'num_permission': len(self._permissions),
                      'num_hardware': len(self._hardwares),}
        # List of all intents in apk
        _intent = list()
        # Apk components
        components_dict = {'activity': self.androguard.get_activities(),
        'service': self.androguard.get_services(),
        'receiver': self.androguard.get_receivers(),
        'provider': self.androguard.get_providers()}

        # Extract intents
        for categorie,names in components_dict.items():
            # Components and Count the number of each components in apk
            count_dict.update({'num_'+categorie : len(names)})
            resulat_dict.update({categorie : dict(Counter(components_dict[categorie]))})
            # Extract intent filter for each component
            intents = self.extract_intent(categorie,names)
            self._filters.extend(intents)
            count_dict.update({'num_intent_'+categorie :len(intents)})
        resulat_dict.update({'intent': dict(Counter(self._filters))})
        count_dict.update({'num_intent':len(self._filters)})
        resulat_dict.update({'component_count': count_dict})
        return resulat_dict

    def extract_manifest_features(self,apk_path, tool=0)->dict:
        if tool==0:
            #call aapt
            return self.extract_features_using_tool(apk_path,execute_aapt,AAPT_OUTPUT_MANIFEST,PATTERN)
        elif tool==1:
            #call apktool
            return self.extract_features_using_tool(apk_path, execute_apktool, APKTOOL_OUTPUT_MANIFEST, PATTERN_XML)
        elif tool == 2:
            #call androguard
            return self.extract_features_using_androguard()

    #used after calling aapt to distinguish the type of pattern found in regex
    def get_feature(self,match):
        if match.group(PERMISSION):
            self._permissions.append(match.group(PERMISSION))
        elif match.group(FEATURE):
            self._hardwares.append(match.group(FEATURE))
        elif match.group(INTENT):
            self._filters.append(match.group(INTENT))
        elif match.group(ACTIVITY):
            self._activities.append(match.group(ACTIVITY))
        elif match.group(SERVICE):
            self._services.append(match.group(SERVICE))
        elif match.group(PROVIDER):
            self._providers.append(match.group(PROVIDER))
        elif match.group(RECEIVER):
            self._receivers.append(match.group(RECEIVER))


# from pfe_plateforme_web.settings import APK_DIR
# path_to_apk = os.path.join(APK_DIR,'skygofree.apk')
# one= extract_features_using_androguard(path_to_apk)
# print(one)