import os

from celery import shared_task
from celery.utils.log import get_task_logger
from sklearn.decomposition import TruncatedSVD

from main.models import VectorSpace
from main.vector_space_constractor import vectorizer
from pfe_plateforme_web.settings import MODELS_DIR
from training_app import learner
from training_app.emails import send_feedback_email
from db_manager import get_vector_space_features, insert_model
import pickle
logger=get_task_logger(__name__)

@shared_task(name='training_task')
def training_task(name,email,message,vs_id,datasets,type_cls,cv,pca,score,model_name):
    logger.info ("Building vector space dictionnary ...")
    vs_dict, vs_dict_inv = vectorizer.build_vector_space_dict (features=get_vector_space_features (vs_id=vs_id))
    logger.info ("Building data matrix X,y  ...")
    X, y = vectorizer.get_X_y_datasets (vector_space_dict=vs_dict, datasets=datasets)
    logger.info ("Splitting into test and training data ...")
    X_train, X_test, y_train, y_test = learner.train_test_split (X, y, shuffle=True, random_state=learner.RANDOM_STATE)

    # application extraction des dimensions
    if (pca=='True'):
        logger.info ("Extracting dimensions ...")
        svd = TruncatedSVD (n_components=100, n_iter=7, random_state=learner.RANDOM_STATE)
        X_train = svd.fit_transform (X_train)
        X_test = svd.transform (X_test)

    n_samples = X_train.shape[0]
    logger.info ("Start training ...")
    hyper_params = learner.init_hyper_params (n_samples)
    classifiers = learner.init_classifier (n_samples)
    grid_search_result = learner.train_hyper_parameters (estimator=classifiers[type_cls], X_train=X_train, y_train=y_train,
                                                         nb_splits=cv, param_grid=hyper_params[type_cls],
                                                         scorer=score)
    logger.info ("Start model validation ...")
    validation_report = learner.evaluate (estimator=grid_search_result['best_estimator'], X_test=X_test, y_test=y_test)

    logger.info ("Saving the model ...")
    model_path = os.path.join (MODELS_DIR, model_name+'.sav')
    pickle.dump (grid_search_result['best_estimator'], open (model_path, 'wb'))

    vs=VectorSpace.objects.get(id=vs_id)
    # add the datasets list
    insert_model(path=model_path,name=model_name,type_cls=type_cls,auc=validation_report['auc'],tp=validation_report['tp'],tn=validation_report['tn'],fp=validation_report['fp'],fn=validation_report['fn'],vs=vs)


    logger.info ("Sending email ...")
    return send_feedback_email(name,email,message)