from django import forms
from main.models import VectorSpace, Dataset, Feature, Model

MALWARE_DATASETS = [
    ('virusshare', 'Virusshare'),
    ('drebin', 'Drebin'),
]

BEGNIN_DATASETS = [
    ('dzplay', 'DZPlay'),
    ('darwin', 'Darwin'),
]


class DatasetsForm (forms.Form):
    DATASETS_OPTIONS = [(dataset.name, dataset.name.title ()) for dataset in Dataset.objects.all ()]
    MODEL_OPTIONS = [(m.pk, m.__str__) for m in Model.objects.all ()]
    datasets = forms.MultipleChoiceField (label="Choisissez un à plusieurs datasets", widget=forms.SelectMultiple,
                                          choices=DATASETS_OPTIONS)
    model = forms.CharField (label="Sélectionnez un modèle", widget=forms.Select (choices=MODEL_OPTIONS))




class VectorSpaceForm (forms.Form):
    # options lists
    DATASETS_OPTIONS = [(dataset.name, dataset.name.title ()) for dataset in Dataset.objects.all ()]
    FEATURES_TYPE_OPTIONS = [(feature['type'], feature['type'].title ()) for feature in
                             Feature.objects.values ('type').distinct ()]
    REP_OPTIONS = [('binaire', 'Binaire'), ('continue', 'Continue')]
    SCAL_OPTIONS =  [('none','Aucun'),('standardscaler', 'Standard Scaler'), ('minmaxscaler', 'MinMax Scaler'),('robustscaler', 'Robust Scaler')]
    # fields
    datasets = forms.MultipleChoiceField (label="Choisissez un à plusieurs datasets", widget=forms.SelectMultiple,
                                          choices=DATASETS_OPTIONS)
    type_features = forms.MultipleChoiceField (label="Choisissez un à plusieurs type de caratéristiques",
                                               widget=forms.SelectMultiple, choices=FEATURES_TYPE_OPTIONS)
    rep_type = forms.CharField (label='Type de réprentation du vecteur caractéristique',
                                widget=forms.Select (choices=REP_OPTIONS))
    scal_type = forms.CharField (label='Type de mise à l\'échelle (Scaling)',
                                widget=forms.Select (choices=SCAL_OPTIONS))



class SelectDimensionsForm (forms.Form):
    M_OPTIONS = [(m.id, m.__str__) for m in Model.objects.filter(type_cls='RandomForest')]
    REP_OPTIONS = [('binaire', 'Binaire'), ('continue', 'Continue')]
    SCAL_OPTIONS =  [('none','Aucun'),('standardscaler', 'Standard Scaler'), ('minmaxscaler', 'MinMax Scaler'),('robustscaler', 'Robust Scaler')]
    # fields

    rep_type = forms.CharField (label='Type de réprentation du vecteur caractéristique',
                                widget=forms.Select (choices=REP_OPTIONS))
    scal_type = forms.CharField (label='Type de mise à l\'échelle (Scaling)',
                                widget=forms.Select (choices=SCAL_OPTIONS))

    models= forms.CharField (label="Sélectionnez un modèle Random Forest", widget=forms.Select (choices=M_OPTIONS))
    nb_features = forms.IntegerField (label="Entrez le nombre de caractéristiques", min_value=0, initial=0,
                                      widget=forms.NumberInput (attrs={'class': 'form-control'}))


class TrainModelForm (forms.Form):
    # options lists
    DATASETS_OPTIONS = [(dataset.name, dataset.name.title ()) for dataset in Dataset.objects.all ()]
    CLS_OPTIONS = [('SVC', 'Support Vector Classification'), ('RandomForest', 'Random Forest'), ('LinearSVC', 'Linear Support Vector Classification'), ('NaiveBays', 'Naive Bayes'), ('SGD', 'Stochastic Gradient Descent'), ('PassiveAggressive', 'Passive Aggressive'),
                   ('AdaBoost', 'AdaBoost'), ('GBoosting', 'GBoosting'),('Bagging', 'Bagging'),('Stacking', 'Stacking'),]
    VS_OPTIONS = [(vs.pk, vs.__str__) for vs in VectorSpace.objects.all()]
    SCORE_OPTIONS=[('precision','Precision'),('recall','Recall'),('roc_auc','ROC_AUC')]
    # fields
    name=forms.CharField(label='Entrez le nom de votre modèle', widget=forms.TextInput(attrs={'placeholder': ''}),max_length=30)
    datasets = forms.MultipleChoiceField (label="Choisissez un à plusieurs datasets", widget=forms.SelectMultiple,choices=DATASETS_OPTIONS)
    type_cls = forms.CharField (label="Sélectionnez le type de classificateur",widget=forms.Select (choices=CLS_OPTIONS),required=False)
    cv=forms.IntegerField(label='Entrez la valeur de la stratégie cross-validation',required=False,initial=3,max_value=10,min_value=1)
    score = forms.CharField (label="Sélectionnez un type de score", widget=forms.Select (choices=SCORE_OPTIONS))
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    pca=forms.ChoiceField(label="Voulez-vous appliquer l'extraction des dimensions? (SVD)",  choices=((False, 'Non'), (True, 'Oui')))



class SvmForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire', 'continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    c_range=forms.IntegerField(label="Nombre de valeur du paramètre C à générer",min_value=10,max_value=100)


class RfForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire','continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    n_estimators = forms.IntegerField (label="Entrez nombre de valeurs d'estimateurs à générer", min_value=1, max_value=10)
    max_depth=forms.IntegerField (label="Entrez le nombre de valeurs des niveaux max dans chaque arbre de décision", min_value=1, max_value=10)
    boostrap=forms.ChoiceField(label='Veuillez-vous appliquer le Boostrap?',choices=((False, 'Non'), (True, 'Oui')))


class KnnForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire','continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    n_neighbors = forms.IntegerField (label="Entrez nombre de valeurs des voisins à générer", min_value=1, max_value=10)

class StackingForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire','continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    svm_c = forms.IntegerField (label="Entrez le nombre de valeurs du paramètre linearSVC_C à générer", min_value=10, max_value=100)
    lr_c = forms.IntegerField (label="Entrez le nombre de valeurs du paramètre meta-logisticregression_C à générer", min_value=10, max_value=100)
    n_neighbors = forms.IntegerField (label="Entrez nombre de valeurs des voisins KNN à générer", min_value=1, max_value=10)
    n_estimators = forms.IntegerField (label="Entrez nombre de valeurs d'estimateurs RandomForest à générer", min_value=1,
                                       max_value=10)



class BaggingForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire','continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    n_estimators = forms.IntegerField (label="Entrez nombre de valeurs d'estimateurs Baggging à générer", min_value=1,
                                       max_value=10)


class AdaboostForm (forms.Form):
    cls = forms.CharField (initial='adaboost')
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire','continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))
    n_estimators = forms.IntegerField (label="Entrez nombre de valeurs d'estimateurs AdaBoost à générer", min_value=1,
                                       max_value=10)


class MlpForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['binaire','continue'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))



class CnnForm (forms.Form):
    VS_OPTIONS = [(vs.id, vs.__str__) for vs in VectorSpace.objects.filter (representation_type__in=['one-hot','tf-idf'])]
    vs = forms.CharField (label="Sélectionnez un espace vectoriel", widget=forms.Select (choices=VS_OPTIONS))

