import os
import pickle

from django.core.files.storage import FileSystemStorage
from rest_framework.views import APIView
from rest_framework.parsers import FileUploadParser
from rest_framework.response import Response
from rest_framework import status
from rest_framework.exceptions import ParseError

from db_manager import is_apk_in_db, get_apk_by_sha, get_apk_dict_info
from main.extractor.apis_manager import init_in_memory_suspicious, init_in_memory_all_permission_mappings
from main.extractor.apk_information_extractor import get_sha256
from main.extractor.feature_extractor import extract_apk
from main.models import Model
from main.vector_space_constractor.vectorizer import build_vector_space_dict, get_X
from pfe_plateforme_web.settings import APK_DIR


class FileView (APIView):
  parser_class = (FileUploadParser,)

  def put(self, request, format=None):
    if 'file' not in request.data:
      raise ParseError ("Empty content")
    print ("New application!!!")
    f = request.data['file']
    print(f.name)
    # do something with thefile
    fs=FileSystemStorage()
    file_path = os.path.join (APK_DIR, f.name)
    path_to_apk=fs.save(file_path,f)

    results = list ()
    nb_maline = 0
    nb_benin = 0
    sha256 = get_sha256 (path_to_apk)


    if is_apk_in_db (sha256=sha256):
          apk = get_apk_by_sha (sha256=sha256)
    else:
          print("New application!!!")
          init_in_memory_suspicious ()
          init_in_memory_all_permission_mappings ()
          apk, target_api = extract_apk (path=path_to_apk, dataset='user', malignity=0)

    apk_info_dict = get_apk_dict_info (apk=apk)
    request.session['apk_info_dict'] = apk_info_dict
    models = Model.objects.all ()
    for m in models:
        # load model
        filename = m.path
        loaded_model = pickle.load (open (filename, 'rb'))
        vs = m.vs
        vs_dict, vs_dict_inv = build_vector_space_dict (vs.features.all ())
        with_freq = True if vs.representation_type == 'continue' else False
        X = get_X (vector_space_dict=vs_dict, apk_id=apk.id,sparce=True,with_frequence=with_freq)
        print (X.shape)
        res = loaded_model.predict (X)
        # result to display
        nb_maline = nb_maline + 1 if res[0] == 1 else nb_maline
        nb_benin = nb_benin + 1 if res[0] == 0 else nb_benin
        results.append ({'name': m.name,'label':res[0]})

    if nb_benin > nb_maline:
      apk.malignity = 0
    else:
      apk.malignity = 1
    apk.save ()
    return Response (status=status.HTTP_201_CREATED,data=results)


