from django.shortcuts import render, redirect, render_to_response
from django.urls import reverse_lazy
from django.views.generic import TemplateView, FormView, ListView
from django.core.files.storage import FileSystemStorage
from  django.contrib import messages

from django.contrib.auth.models import User

from db_manager import is_apk_in_db, get_apk_dict_info, get_apk_by_sha
from detection_app.forms import UploadApkFileForm,GenerateRandomUserForm
from detection_app.tasks import my_task,analyse_apk
import os

from main.extractor.apis_manager import init_in_memory_suspicious, init_in_memory_all_permission_mappings
from main.extractor.apk_information_extractor import get_sha256
from main.extractor.feature_extractor import extract_apk
from  pfe_plateforme_web.settings import APK_DIR
import json
from django.shortcuts import render
from celery.result import AsyncResult
from django.http import HttpResponse



# Create your views here.

def index(request):
    if request.method == 'POST' and request.FILES['Fichier_1']:
        myfile = request.FILES['Fichier_1']
        fs = FileSystemStorage()
        file_path=os.path.join(APK_DIR,myfile.name)
        if myfile.name.split('.')[-1]=='apk':
            filename = fs.save(file_path, myfile)
            uploaded_file_url = fs.url(filename)
            request.session['file_name']=myfile.name
            #result=analyse_apk.delay(filename)
            #messages.success (request, 'Veuillez patienter ...')
            #apk_info_dict=result.get()
            return render(request, 'detection_app/please_wait.html')
        else:
            messages.error(request, "Veuillez charger un fichier .apk !")

    return render(request,"detection_app/home.html")

def analyse_apk_view(request):
    if request.session.has_key ('file_name'):
        path_to_apk = os.path.join(APK_DIR,request.session['file_name'])
        sha256 = get_sha256 (path_to_apk)
        if is_apk_in_db (sha256=sha256):
            apk_info_dict = get_apk_dict_info (apk=get_apk_by_sha (sha256=sha256))
            request.session['apk_info_dict']=apk_info_dict
            print ('apk extracted')
            return HttpResponse('OK')
        else:
            init_in_memory_suspicious ()
            init_in_memory_all_permission_mappings ()
            apk, target_api = extract_apk (path=path_to_apk, dataset='user', malignity=0)
            apk_info_dict = get_apk_dict_info (apk=apk)
            request.session['apk_info_dict'] = apk_info_dict
            return HttpResponse('OK')
    else:
        return HttpResponse('')

def display_result_view(request):
    if request.session.has_key ('apk_info_dict') and request.session.has_key ('file_name'):
        apk_info_dict=request.session['apk_info_dict']
        file_name=request.session['file_name']
        return  render(request, 'detection_app/result.html',{'apk_info_dict':apk_info_dict,'file_name':file_name})
    else:
        return render (request, 'detection_app/result.html', {})

def handle_uploaded_file(f):
    with open(os.path.join(APK_DIR,f.name), 'wb+') as destination:
        for chunk in f.chunks():
            destination.write(chunk)









class HomePage(FormView):
    form_class = UploadApkFileForm
    template_name = 'detection_app/index.html'
    success_url = reverse_lazy('detection_app/result.html')

    def post(self, request, *args, **kwargs):
        form_class = self.get_form_class ()
        form = self.get_form (form_class)
        if form.is_valid ():
            handle_uploaded_file (request.FILES['file'])
            return self.form_valid(form)
        else:
            return  self.form_invalid(form)

def progress_view(request):
    result = my_task.delay(10)
    return render(request, 'detection_app/display_progress.html', context={'task_id': result.task_id})