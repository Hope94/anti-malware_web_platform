from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views.generic import TemplateView, FormView, ListView
from django.core.files.storage import FileSystemStorage
from  django.contrib import messages

from django.contrib.auth.models import User
from detection_app.forms import UploadApkFileForm,GenerateRandomUserForm
from detection_app.tasks import create_random_user_accounts,my_task,analyse_apk
import os
from  pfe_plateforme_web.settings import APK_DIR
import json
from django.shortcuts import render
from celery.result import AsyncResult
from django.http import HttpResponse



# Create your views here.

def index(request):
    if request.method == 'POST' and request.FILES['Fichier_1']:
        myfile = request.FILES['Fichier_1']
        fs = FileSystemStorage()
        file_path=os.path.join(APK_DIR,myfile.name)
        if myfile.name.split('.')[-1]=='apk':
            filename = fs.save(file_path, myfile)
            uploaded_file_url = fs.url(filename)
            result=analyse_apk.delay(filename)
            messages.success (request, 'Veuillez patienter ...')
            apk_info_dict=result.get()
            return render(request, 'detection_app/result.html', {
                'uploaded_file_url': uploaded_file_url,
                'file_name': myfile.name,
                'apk_info_dict':apk_info_dict
            })
        else:
            messages.error(request, "Veuillez charger un fichier .apk !")

    return render(request,"detection_app/home.html")


def handle_uploaded_file(f):
    with open(os.path.join(APK_DIR,f.name), 'wb+') as destination:
        for chunk in f.chunks():
            destination.write(chunk)









class HomePage(FormView):
    form_class = UploadApkFileForm
    template_name = 'detection_app/index.html'
    success_url = reverse_lazy('detection_app/result.html')

    def post(self, request, *args, **kwargs):
        form_class = self.get_form_class ()
        form = self.get_form (form_class)
        if form.is_valid ():
            handle_uploaded_file (request.FILES['file'])
            return self.form_valid(form)
        else:
            return  self.form_invalid(form)


class GenerateRandomUsersView(FormView):
    form_class = GenerateRandomUserForm
    template_name = 'detection_app/generate_random_users.html'
    def form_valid(self, form):
        total = form.cleaned_data.get('total')
        result=create_random_user_accounts.delay(total)
        messages.success(self.request, 'We are generating your random users! Wait a moment and refresh this page.')
        return render(self.request,'detection_app/users_list.html',context={'task_id':result.id})

def generate_random_user(request):
    if request.method == 'POST':
        form = GenerateRandomUserForm(request.POST)
        if form.is_valid():
            total_user = form.cleaned_data.get('total_user')
            task = create_random_user_accounts.delay(total_user)
            return HttpResponse(json.dumps({'task_id': task.task_id}), content_type='application/json')
        else:
            return HttpResponse(json.dumps({'task_id': None}), content_type='application/json')
    else:
        form = GenerateRandomUserForm
    return render(request, 'detection_app/generate_random_users.html', {'form': form})

def get_task_info(request):
    task_id = request.GET.get('task_id', None)
    if task_id is not None:
        task = AsyncResult(task_id)
        data = {
            'state': task.status,
            'result': task.result,
        }
        return HttpResponse(json.dumps(data), content_type='application/json')
    else:
        return HttpResponse('No job id given.')

def progress_view(request):
    result = my_task.delay(10)
    return render(request, 'detection_app/display_progress.html', context={'task_id': result.task_id})