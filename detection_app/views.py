import pickle
import numpy as np
from django.middleware.cache import CacheMiddleware
from django.shortcuts import render, redirect, render_to_response
from django.urls import reverse_lazy
from django.utils.decorators import decorator_from_middleware_with_args
from django.views.generic import TemplateView, FormView, ListView, DetailView
from django.core.files.storage import FileSystemStorage
from django.contrib import messages

from django.contrib.auth.models import User

from db_manager import is_apk_in_db, get_apk_dict_info, get_apk_by_sha
from detection_app.forms import UploadApkFileForm, GenerateRandomUserForm
from detection_app.tasks import my_task, analyse_apk
import os

from main.extractor.apis_manager import init_in_memory_suspicious, init_in_memory_all_permission_mappings
from main.extractor.apk_information_extractor import get_sha256
from main.extractor.feature_extractor import extract_apk
from main.forms import SearchApkForm
from main.models import Model, Apk
from main.search_engine import apk_search
from main.vector_space_constractor.vectorizer import build_vector_space_dict, get_X
from pfe_plateforme_web.settings import APK_DIR
import json
from django.shortcuts import render
from celery.result import AsyncResult
from django.http import HttpResponse


# Create your views here.

def index(request):
    if request.method == 'POST' and request.FILES['Fichier_1']:
        myfile = request.FILES['Fichier_1']
        fs = FileSystemStorage ()
        file_path = os.path.join (APK_DIR, myfile.name)
        if myfile.name.split ('.')[-1] == 'apk':
            filename = fs.save (file_path, myfile)
            uploaded_file_url = fs.url (filename)
            request.session['file_name'] = myfile.name
            return render (request, 'detection_app/please_wait.html')
        else:
            messages.error (request, "Veuillez charger un fichier .apk !")

    return render (request, "detection_app/home.html")



def analyse_apk_view(request):
    if request.session.has_key ('file_name'):
        results = list ()
        nb_maline = 0
        nb_benin = 0
        path_to_apk = os.path.join (APK_DIR, request.session['file_name'])
        sha256 = get_sha256 (path_to_apk)

        if is_apk_in_db (sha256=sha256):
            apk = get_apk_by_sha (sha256=sha256)
        else:
            init_in_memory_suspicious ()
            init_in_memory_all_permission_mappings ()
            apk, target_api = extract_apk (path=path_to_apk, dataset='user', malignity=0)

        apk_info_dict = get_apk_dict_info (apk=apk)
        request.session['apk_info_dict'] = apk_info_dict
        models = Model.objects.all ()
        for m in models:
            # load model
            filename = m.path
            loaded_model = pickle.load (open (filename, 'rb'))
            vs = m.vs
            vs_dict, vs_dict_inv = build_vector_space_dict (vs.features.all ())
            X = get_X (vector_space_dict=vs_dict, apk_id=apk.id)
            print (X.shape)
            res = loaded_model.predict (X)
            # result to display
            nb_maline = nb_maline + 1 if res[0] == 1 else nb_maline
            nb_benin = nb_benin + 1 if res[0] == 0 else nb_benin
            label = 'BÃ©nigne' if res[0] == 0 else 'Maline'
            icon = "fa fa-check-circle" if res[0] == 0 else "fa fa-times-circle"
            style = "color:green" if res[0] == 0 else "color:red"
            results.append ({'name': m.name, 'label': label, 'icon': icon, 'style': style})

        if nb_benin > nb_maline:
            apk.malignity = 0
        else:
            apk.malignity = 1

        apk.save ()
        request.session['results'] = results

        return HttpResponse ('OK')
    else:
        return HttpResponse ('')


def display_result_view(request):
    if request.session.has_key ('apk_info_dict') and request.session.has_key ('file_name') and request.session.has_key (
            'results'):
        apk_info_dict = request.session['apk_info_dict']
        file_name = request.session['file_name']
        results = request.session['results']
        return render (request, 'detection_app/result.html',
                       {'apk_info_dict': apk_info_dict, 'file_name': file_name, 'results': results})
    else:
        return render (request, 'detection_app/error.html')



class ApkListView (ListView):
    context_object_name = 'apks'
    model = Apk
    paginate_by = 4
    form_class = SearchApkForm
    queryset = Apk.objects.order_by ('-id')
    template_name = "detection_app/apks.html"

    def get_queryset(self):
        queryset = Apk.objects.all ().order_by ('-id')
        q = self.request.GET.get ('q', None)
        if q is not None:
            queryset = apk_search.search_for_apks (q).order_by ('-id')
        return queryset


class ApkDetailView (DetailView):
    context_object_name = 'apk_detail'
    model = Apk
    template_name = 'detection_app/apk_detail.html'
