import string

from django.contrib.auth.models import User
from django.utils.crypto import get_random_string

from celery import shared_task,current_task
from celery_progress.backend import ProgressRecorder
import time

from db_manager import is_apk_in_db, get_apk_dict_info, get_apk_by_sha
from main.extractor.apis_manager import init_in_memory_suspicious, init_in_memory_all_permission_mappings
from main.extractor.apk_information_extractor import get_sha256
from main.extractor.feature_extractor import extract_apk


@shared_task
def create_random_user_accounts(total_user):
    for i in range(total_user):
        username = 'user_%s' % get_random_string(20, string.ascii_letters)
        email = '%s@example.com' % username
        password = get_random_string(50)
        User.objects.create_user(username=username, email=email, password=password)
        current_task.update_state(state='PROGRESS',
                                  meta={'current': i, 'total': total_user,
                                        'percent': int((float(i) / total_user) * 100)})
    return {'current': total_user, 'total': total_user, 'percent': 100}

@shared_task(bind=True)
def my_task(self, seconds):
    progress_recorder = ProgressRecorder(self)
    for i in range(seconds):
        time.sleep(1)
        progress_recorder.set_progress(i + 1, seconds)
    return 'done'


@shared_task
def analyse_apk(path_to_apk):
    sha256 = get_sha256 (path_to_apk)
    if is_apk_in_db (sha256=sha256):
        apk_info_dict = get_apk_dict_info (apk=get_apk_by_sha (sha256=sha256))
        return apk_info_dict
    else:
        init_in_memory_suspicious ()
        init_in_memory_all_permission_mappings ()
        apk, target_api = extract_apk (path=path_to_apk, dataset='user',malignity=0)
        print ('apk extracted')
        apk_info_dict = get_apk_dict_info (apk=apk)
        return apk_info_dict




